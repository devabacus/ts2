name: Build and Deploy to Kubernetes

on:
  push:
    branches: [ master ] # Срабатывает при пуше в ветку main
  workflow_dispatch:      # Позволяет запускать вручную из интерфейса GitHub

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ШАГ СОЗДАНИЯ СЕКРЕТА ОТСЮДА УБРАН

      - name: Log in to Timeweb Container Registry
        uses: docker/login-action@v3
        with:
          registry: dbe81550-wise-chickadee.registry.twcstorage.ru
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./ts2_server # Указываем контекст для сборки
          file: ./ts2_server/Dockerfile.prod # Путь к вашему Dockerfile
          push: true
          tags: dbe81550-wise-chickadee.registry.twcstorage.ru/ts2-server:latest

  deploy-to-cluster:
    needs: build-and-push-image # Эта задача начнется только после успешной сборки и пуша образа
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Kubeconfig
        uses: azure/k8s-set-context@v4
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      # --- ШАГ СОЗДАНИЯ СЕКРЕТА ПЕРЕНЕСЕН СЮДА ---
      - name: Create or Update Kubernetes Secret
        run: |
          kubectl create secret generic serverpod-secrets-ts2 \
            --from-literal=database-password='${{ secrets.DB_PASSWORD }}' \
            --from-literal=redis-password='${{ secrets.REDIS_PASSWORD }}' \
            --from-literal=service-secret='${{ secrets.SERVICE_SECRET }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes manifests
        run: |
          # Применяем все конфигурации из папки k8s
          # Файл secret.yaml больше не нужен, так как мы создаем секрет командой выше
          kubectl apply -f ts2_server/k8s/configmap.yaml
          kubectl apply -f ts2_server/k8s/deployment.yaml
          kubectl apply -f ts2_server/k8s/service.yaml
          kubectl apply -f ts2_server/k8s/ingress.yaml
          kubectl apply -f ts2_server/k8s/job.yaml
          
          # Принудительно перезапускаем Deployment, чтобы он точно подхватил новый образ и секреты
          kubectl rollout restart deployment ts2-server-deployment